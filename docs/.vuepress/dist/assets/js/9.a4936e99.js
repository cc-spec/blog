(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{445:function(t,s,a){t.exports=a.p+"assets/img/git.84002084.png"},484:function(t,s,a){"use strict";a.r(s);var e=a(25),i=Object(e.a)({},(function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h2",{attrs:{id:"一、-gitignore不起作用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#一、-gitignore不起作用"}},[t._v("#")]),t._v(" 一、.gitignore不起作用")]),t._v(" "),e("ul",[e("li",[t._v("原因：.gitignore只能忽略原先没有被track的文件，如果文件已经被加入到了版本管理中，再去添加.gitignore是不起作用的")]),t._v(" "),e("li",[t._v("解决：")])]),t._v(" "),e("div",{staticClass:"language-JavaScript extra-class"},[e("pre",{pre:!0,attrs:{class:"language-javascript"}},[e("code",[t._v("git rm "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("r "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("cached "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 清除本地当前缓存")]),t._v("\ngit add "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 重新添加到暂存区")]),t._v("\ngit commit "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("m "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'更新'")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 重新提交")]),t._v("\n")])])]),e("h2",{attrs:{id:"二、git-pull-和-git-fetch-的区别"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#二、git-pull-和-git-fetch-的区别"}},[t._v("#")]),t._v(" 二、git pull 和 git fetch 的区别")]),t._v(" "),e("ul",[e("li",[e("img",{attrs:{src:a(445),alt:"image.png"}})]),t._v(" "),e("li",[t._v("git pull：从远程获取最新版本并merge到本地")]),t._v(" "),e("li",[t._v("git fetch：从远程获取最新版本但是不自动merge")])]),t._v(" "),e("h2",{attrs:{id:"三、git-stash保存暂存区-切换到另一个分支后出现冲突"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#三、git-stash保存暂存区-切换到另一个分支后出现冲突"}},[t._v("#")]),t._v(" 三、git stash保存暂存区，切换到另一个分支后出现冲突")]),t._v(" "),e("ul",[e("li",[t._v("创建一个新的分支"),e("code",[t._v("git checkout -b newBranch")])]),t._v(" "),e("li",[t._v("将当前未提交到本地（和服务器）的代码推入到Git的栈中"),e("code",[t._v("git stash")])]),t._v(" "),e("li",[t._v("清空Git栈"),e("code",[t._v("git stash clear")])])]),t._v(" "),e("h2",{attrs:{id:"四、撤销"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#四、撤销"}},[t._v("#")]),t._v(" 四、撤销")]),t._v(" "),e("ul",[e("li",[t._v("撤销一个提交\n"),e("ul",[e("li",[e("code",[t._v("撤销：git reset --soft HEAD^")])]),t._v(" "),e("li",[e("code",[t._v("还原：git revert -m l HEAD")])])])]),t._v(" "),e("li",[t._v("撤销合并或拉动\n"),e("ul",[e("li",[e("code",[t._v("git reset --hard")])])])]),t._v(" "),e("li",[t._v("本次提交跟上次使用同样的描述\n"),e("ul",[e("li",[e("code",[t._v("git commit --amend")])])])])]),t._v(" "),e("h2",{attrs:{id:"五、git-stash的正确打开方式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#五、git-stash的正确打开方式"}},[t._v("#")]),t._v(" 五、git stash的正确打开方式")]),t._v(" "),e("ul",[e("li",[t._v("暂存工作区："),e("code",[t._v("git stash")])]),t._v(" "),e("li",[t._v("取出工作区："),e("code",[t._v("git stash pop")])]),t._v(" "),e("li",[t._v("查看存了哪几个工作区："),e("code",[t._v("git stash list")])]),t._v(" "),e("li",[t._v("查看暂存的工作区都有啥更新："),e("code",[t._v("git stash show 查看最新的stash中的内容")])]),t._v(" "),e("li",[t._v("取出某个工作区："),e("code",[t._v("git stash apply stash@{1} 取出第二工作区")])]),t._v(" "),e("li",[t._v("新增的文件无法被存储：解决方法：git add加到版本控制中之后就可以stash")])]),t._v(" "),e("h2",{attrs:{id:"六、撤销git-reset"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#六、撤销git-reset"}},[t._v("#")]),t._v(" 六、撤销git reset")]),t._v(" "),e("ul",[e("li",[t._v("使用"),e("code",[t._v("git reset --hard [commit-id]")]),t._v("丢弃了一切更改")]),t._v(" "),e("li",[t._v("现在想找回reset之前的文件")]),t._v(" "),e("li",[e("code",[t._v("git reflog")]),t._v("查看提交记录，找到错误删除的文件的[commit-id]")]),t._v(" "),e("li",[t._v("再次使用"),e("code",[t._v("git reset [commit-id]")]),t._v("回退")])])])}),[],!1,null,null,null);s.default=i.exports}}]);